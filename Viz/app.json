[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\n\r\nlibrary(shiny)\r\n# library(ggplot2)\r\n\r\n\r\n# install.packages(\"DT\")\r\n# library(DT)\r\nlibrary(dplyr)\r\nlibrary(readxl)\r\nlibrary(stringr)\r\nlibrary(lubridate)\r\npath = \"C:\\\\Users\\\\Najwan\\\\OneDrive\\\\Desktop\\\\Datasets\\\\supermarket_sales - Sheet1.csv\"\r\ndata <-  read.csv(path)\r\ndf <- data.frame(data)\r\n\r\ndf$sales_date <- NA\r\n\r\n# df$sales_date <- format(as.Date(df$Date, format = \"%m/%d/%Y\"), \"%Y-%m-%d\")\r\ndf$sales_date <- as.Date(df$Date, format = \"%m/%d/%Y\")\r\ndf$Month <- format(df$sales_date, \"%B\")\r\ndf$Month <- as.character(df$Month)\r\n\r\n# Assuming your date column is named 'Date'\r\ndf <- df[order(df$sales_date), ]  # Sort in ascending order\r\n\r\n\r\ndf <- df %>% select(-c(Date,Time, Branch,Tax.5., City))\r\nsdf <- df %>%\r\n       filter(Customer.type == \"Normal\") %>%\r\n       group_by(Invoice.ID) %>%\r\n       summarise(count = n())\r\n\r\nmonths.num <- 1:12\r\nmonths.num <- as.list(months.num)\r\n\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  tags$head(\r\n    tags$style(\r\n      HTML(\r\n        \"\r\n      h2 {\r\n        text-align: center;\r\n      }\r\n    \"\r\n      )\r\n    )\r\n  ),\r\n  # Application title\r\n  \r\n  titlePanel(\"Supermarket Sales\"),\r\n      # selectInput(\"page\", \"Choose a page:\", choices = c(\"Home\", \"About\")),\r\n      # uiOutput(\"page_ui\"),\r\n    \r\n    \r\n    \r\n    \r\n    # verbatimTextOutput(\"greeting\"),\r\n   \r\n    # Sidebar with a slider input for number of bins \r\n    # sidebarLayout(\r\n    \r\n      fluidRow(\r\n        # sidebarPanel(width = 3,\r\n        # # column(width = 2,\r\n        # # sidebarPanel(width = 4,\r\n        # # fileInput(\"myfile\", \"Choose a CSV file\", \r\n        # #           accept = c(\".csv\")),\r\n        # \r\n        # sliderInput(\"bins1\",\r\n        #             \"Number of bedrooms:\",\r\n        #             min = 1,\r\n        #             max = 50,\r\n        #             value = 30),\r\n        #     # verbatimTextOutput(\"greeting\"),\r\n        #     sliderInput(\"bins2\",\r\n        #                 \"Number of bins:\",\r\n        #                 min = 1,\r\n        #                 max = 50,\r\n        #                 value = 30),\r\n        #     sliderInput(\"bins3\",\r\n        #                 \"Number of bins:\",\r\n        #                 min = 1,\r\n        #                 max = 50,\r\n        #                 value = 30),\r\n        #     sliderInput(\"bins4\",\r\n        #                 \"Number of bins:\",\r\n        #                 min = 1,\r\n        #                 max = 50,\r\n        #                 value = 30)\r\n        #   \r\n        # ),\r\n        column(width = 9, tableOutput(\"preview\"))\r\n        \r\n        \r\n        \r\n        ),\r\n  hr(),\r\n  \r\n  fluidRow(\r\n    sidebarPanel(width = 12,\r\n    sliderInput(\"month_slider\", \"Select the Month to see the matrix:\",\r\n                                 min = unlist(months.num[[1]]),\r\n                                 max = unlist(months.num[[12]]),\r\n                                 value = unlist(months.num[[1]]),\r\n                                 # timeFormat = \"%b %Y\",  # Display format: Jan 2024\r\n                                 step = 1)\r\n           \r\n    ),\r\n  ),\r\n  \r\n  hr(),\r\n  \r\n  fluidRow(\r\n    column(width = 6,plotOutput(\"distPlot1\")),\r\n    column(width = 6,plotOutput(\"distPlot2\"))\r\n  ),\r\n  \r\n  \r\n  \r\n  \r\n  # tags$head(\r\n  #   tags$style(\r\n  #     HTML(\r\n  #       \"\r\n  #         h2 {\r\n  #           text-align: center;\r\n  #         }\r\n  #       \"\r\n  #         )\r\n  #       )\r\n  #     ),\r\n  # \r\n  # \r\n  # titlePanel(\"Travel Tracker\"),\r\n  \r\n  \r\n    hr(),\r\n    # tags$head(\r\n    #   tags$style(\r\n    #     HTML(\r\n    #       \"\r\n    #   h2 {\r\n    #     text-align: center;\r\n    #   }\r\n    # \"\r\n    #     )\r\n    #   )\r\n    # ),\r\n    # # Application title\r\n    # \r\n    # titlePanel(\"Travel Tracker\"),\r\n      fluidRow(\r\n        \r\n        column(width = 6,plotOutput(\"distPlot3\")),\r\n        column(width = 6,plotOutput(\"distPlot4\"))\r\n        \r\n      ),\r\n    hr(),\r\n    \r\n  \r\n    \r\n\r\n\r\n    \r\n    \r\n    )\r\n\r\n\r\n\r\nserver <- function(input, output) {\r\n  \r\n  \r\n  # output$page_ui <- renderUI({\r\n  #   switch(input$page,\r\n  #          \"Home\" = tagList(h2(\"This is the Home Page\"),\r\n  #                           output$distPlot1 <- renderPlot({\r\n  #                             # generate bins based on input$bins from ui.R\r\n  #                             x    <- faithful[, 2]\r\n  #                             bins <- seq(min(x), max(x), length.out = input$bins1 + 1)\r\n  #                             \r\n  #                             # draw the histogram with the specified number of bins\r\n  #                             hist(x, breaks = bins, col = 'orange', border = 'white',\r\n  #                                  xlab = 'Waiting time to next eruption (in mins)',\r\n  #                                  main = 'Histogram of waiting times')\r\n  #                           })),\r\n  #          \"About\" = tagList(h2(\"This is the About Page\"))\r\n  #   )\r\n  # })\r\n  \r\n    output$preview <- renderTable({\r\n\r\n      df$sales_date <- format(as.Date(df$sales_date, format = \"%m/%d/%Y\"), \"%Y-%m-%d\")\r\n      head(df, 8)\r\n\r\n    })\r\n    \r\n    output$distPlot1 <- renderPlot({\r\n        \r\n      selected_month <- month.name[input$month_slider]\r\n      sd <- df %>% filter(Month == as.character(selected_month))\r\n      \r\n      validate(\r\n        need(nrow(sd) > 0, \"No data available for this month.\")\r\n      )\r\n      # ggplot(sd, aes(x = Payment, y = Total, fill = Payment)) +\r\n      #   geom_bar(stat = \"identity\") +\r\n      #   theme_minimal() +\r\n      #   labs(title = \"Payment Types\", y = \"Amounts\")\r\n      \r\n      # Aggregate total by payment type\r\n      payment_totals <- aggregate(Total ~ Payment, data = sd, sum)\r\n      \r\n      # Set up plot margins\r\n      par(mar = c(5, 5, 4, 2))  # bottom, left, top, right\r\n      \r\n      # Create bar chart\r\n      barplot(payment_totals$Total,\r\n              names.arg = payment_totals$Payment,\r\n              col = rainbow(length(payment_totals$Payment)),  # colorful bars\r\n              main = \"Sales through different Payment Types\",\r\n              ylab = \"Amounts\")\r\n      \r\n       \r\n    })\r\n    \r\n    output$distPlot2 <- renderPlot({\r\n      # generate bins based on input$bins from ui.R\r\n      \r\n    \r\n      selected_month <- month.name[input$month_slider]\r\n      sd <- df %>% filter(Month == as.character(selected_month))\r\n      validate(\r\n        need(nrow(sd) > 0, \"No data available for this month.\")\r\n      )\r\n      sales_by_type <- aggregate(gross.income ~ Customer.type, data = sd, sum)\r\n      \r\n      \r\n      # Plot\r\n      # ggplot(sales_by_type, aes(x = \"\", y = gross.income, fill = Customer.type)) +\r\n      #   geom_bar(stat = \"identity\", width = 1) +\r\n      #   coord_polar(\"y\") +\r\n      #   geom_text(aes(label = paste0(Customer.type, \"\\n$\", round(gross.income, 1))),\r\n      #             position = position_stack(vjust = 0.5)) +\r\n      #   ggtitle(\"Customer Type\") +\r\n      #   theme(plot.title = element_text(hjust = 0.5))\r\n        # labs(title = \"Customer Type\")\r\n      \r\n      \r\n      \r\n      # Create labels with customer type and income\r\n      labels <- paste0(sales_by_type$Customer.type, \"\\n$\", round(sales_by_type$gross.income, 1))\r\n      \r\n      # Create pie chart\r\n      pie(sales_by_type$gross.income,\r\n          labels = labels,\r\n          col = c(\"violet\", \"darkred\"),  # Customize colors as needed\r\n          main = \"Customer Type\")\r\n      \r\n    })\r\n    \r\n    output$distPlot3 <- renderPlot({\r\n      \r\n      selected_month <- month.name[input$month_slider]\r\n      sd <- df %>% filter(Month == as.character(selected_month))\r\n      validate(\r\n        need(nrow(sd) > 0, \"No data available for this month.\")\r\n      )\r\n      \r\n      # ggplot(sd, aes(x = sales_date, y = Total)) +\r\n      #   geom_line(color = \"darkgreen\", linewidth = 0.9) +\r\n      #   geom_point(color = \"navy\", size = 2) +\r\n      #   labs(title = \"Sales for last year\", x = \"Date\", y = \"Sales Amount\") +\r\n      # \r\n      #   # scale_x_date(date_labels = \"%b %d, %Y\")+\r\n      #   theme(axis.text.x = element_text(angle = 0, hjust = 1))\r\n        # theme_minimal()\r\n      # Assuming sd is your data frame with sales_date and Total\r\n      # Convert sales_date to Date class if needed\r\n      sd$sales_date <- as.Date(sd$sales_date)\r\n      \r\n      # Set up plot margins and layout\r\n      par(mar = c(5, 5, 4, 2))  # bottom, left, top, right\r\n      \r\n      # Create the line plot\r\n      plot(sd$sales_date, sd$Total,\r\n           type = \"l\",                # line plot\r\n           col = \"darkgreen\",         # line color\r\n           lwd = 0.9,                 # line width\r\n           xlab = \"Date\",\r\n           ylab = \"Sales Amount\",\r\n           main = \"Sales for last year\")\r\n      \r\n      # Add points on top of the line\r\n      points(sd$sales_date, sd$Total,\r\n             col = \"navy\",\r\n             pch = 16,                # solid circle\r\n             cex = 1.2)               # point size\r\n      \r\n      \r\n  \r\n      \r\n    })\r\n    \r\n    output$distPlot4 <- renderPlot({\r\n      selected_month <- month.name[input$month_slider]\r\n      sd <- df %>% filter(Month == as.character(selected_month))\r\n      validate(\r\n        need(nrow(sd) > 0, \"No data available for this month.\")\r\n      )\r\n      rating <- sd %>% group_by(Product.line) %>% summarise(avg_rating = mean(Rating, na.rm = TRUE))\r\n      \r\n      par(mar = c(5, 8, 4, 2))  # More space on left (bottom, left, top, right)\r\n      \r\n      bar_pos <- barplot(rating$avg_rating,\r\n                         names.arg = FALSE,   # We’ll manually draw y labels\r\n                         horiz = TRUE,\r\n                         col = \"lightgreen\",\r\n                         xlab = \"Average Rating\",\r\n                         main = \"Average Rating for each Product Line\",\r\n                         xaxt = \"n\",  # Suppress axis ticks\r\n                         yaxt = \"n\")\r\n      \r\n      # Add y-axis labels (left-end)\r\n      text(x = par(\"usr\")[1] + 0.2,  # Place near the left edge of plot\r\n           y = bar_pos,\r\n           labels = rating$Product.line,\r\n           adj = 0,  # Left-align\r\n           cex = 0.9)\r\n      \r\n      # Add value labels on the bars\r\n      text(x = rating$avg_rating -0.9,  # Just past bar end\r\n           y = bar_pos,\r\n           labels = round(rating$avg_rating, 2),\r\n           adj = 0,\r\n           cex = 0.9,\r\n           col = \"black\")\r\n    })\r\n    \r\n    \r\n    \r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
