[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\n# app.R\r\n\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\n\r\nui <- fluidPage(\r\n  tags$head(\r\n    tags$style(HTML(\"\r\n      h2 {\r\n        text-align: center;\r\n      }\r\n    \"))\r\n  ),\r\n  titlePanel(\"Profit & Loss Calculator\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      numericInput(\"price\", \"Price per Unit ($):\", value = 100),\r\n      numericInput(\"units\", \"Units Sold:\", value = 50),\r\n      numericInput(\"fixed\", \"Fixed Costs ($):\", value = 1000),\r\n      numericInput(\"variable\", \"Variable Cost per Unit ($):\", value = 20)\r\n    ),\r\n    \r\n    mainPanel(\r\n      fluidRow(\r\n      column(width = 6,verbatimTextOutput(\"revenue\")),\r\n      column(width = 6,verbatimTextOutput(\"total_cost\"))\r\n      ),\r\n      \r\n      fluidRow(\r\n        column(width = 6,verbatimTextOutput(\"margin\")),\r\n        column(width = 6,verbatimTextOutput(\"bep\"))\r\n      ),\r\n      \r\n      verbatimTextOutput(\"profit\"),\r\n      \r\n      \r\n      \r\n      fluidRow(\r\n      column(12,\r\n             plotOutput(\"bepplot\") )\r\n      )\r\n      \r\n      \r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output) {\r\n  \r\n  output$bepplot <- renderPlot({\r\n    \r\n    revenue <- input$price * input$units\r\n    total_cost <- input$fixed + (input$variable * input$units)\r\n    sold <- input$units\r\n    \r\n    validate(\r\n      if(!is.na(input$variable) && input$price < input$variable){\r\n        \r\n        need(is.na(input$variable), \"Variable Cost cannot be greater than the price.\")}\r\n        # need(input$price < input$variable, \"Variable Cost cannot be greater than the price.\")}\r\n      \r\n      else if (is.na(input$variable)){\r\n        need(input$price < input$variable, \"Variable Cost cannot be empty if 0 please enter 0.\")},\r\n        # need(is.na(input$variable), \"Variable Cost cannot be empty if 0 please enter 0.\")},\r\n      \r\n      need(!is.na(input$fixed), \"Please enter a valid number for Fixed Cost\")\r\n    )\r\n    beps <- input$fixed/(input$price - input$variable)\r\n    df <- data.frame(Units = seq(0,beps*10,10),Cost = total_cost, Revenue = revenue,beps)\r\n    df$Amount <- df$Units * input$price\r\n    \r\n    ggplot(df, aes(x = Units)) +\r\n      geom_line(aes(y = Amount, color = \"Revenue\"), linewidth = 1.2, col = \"royalblue\") +\r\n      # geom_line(aes(y = beps, color = \"BEP\"), linewidth = 1.2) +\r\n      geom_vline(xintercept = beps, linetype = \"dashed\", color = \"red\") +\r\n      annotate(\"text\", x = beps + 5, y = input$fixed + 500,\r\n               label = paste0(\"Break-even: \", round(beps), \" units\"),\r\n               hjust = 0, color = \"black\", size = 4) +\r\n      labs(title = \"Break-even Analysis\",\r\n           x = \"Units Sold\", y = \"Amount ($)\", color = \"\") +\r\n      theme_minimal() +\r\n      theme(plot.title = element_text(hjust = 0.5))\r\n  })\r\n  output$revenue <- renderText({\r\n    revenue <- input$price * input$units\r\n    paste(\"Revenue: $\", format(round(revenue, 2),big.mark = \",\",scientific = FALSE))\r\n  })\r\n  \r\n  output$total_cost <- renderText({\r\n    total_cost <- input$fixed + (input$variable * input$units)\r\n    paste(\"Total Cost: $\", format(round(total_cost, 2),big.mark = \",\",scientific = FALSE))\r\n  })\r\n  \r\n  output$profit <- renderText({\r\n    profit <- (input$price * input$units) - (input$fixed + input$variable * input$units)\r\n    paste(\"Profit: $\", format(round(profit, 2),big.mark = \",\", scientific = FALSE))\r\n  })\r\n  \r\n  output$margin <- renderText({\r\n    revenue <- input$price * input$units\r\n    profit <- revenue - (input$fixed + input$variable * input$units)\r\n    margin <- ifelse(revenue == 0, 0, profit / revenue * 100)\r\n    paste(\"Profit Margin: \", round(margin, 2), \"%\")\r\n  })\r\n  output$bep <- renderText({\r\n    beps <- input$fixed/(input$price - input$variable)\r\n    paste(\"Break Even Point: \", round(beps,0),\"Units\")\r\n  })\r\n  \r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
